Plan for cart

1. I don't think I need to tie to users. Not until checkout
because the cart can exist without the user being logged in
I might never need to tie the cart to a user, just the order
So I can figure that out later.

But you might want to because it'll let the cart survive logouts.
Maybe the cart just doesn't need to be its own schema. You can write
a function outside of the schema that'll add the product to the cart
and store the cart in local storage. Then if the user logs in, the cart
can be added to the users schema. This'll mean writing two different 
versions of `addToCart`, one for the user schema for when their logged 
in, and another just in the controller that adds the cart object to 
local storage. chapters seems to user session storage. They use session 
storage for logged in users too. Maybe that's not so bad. A good place
to start.

So I don't need the cart schema for now. What do I need to do on the 
back-end? Nothing? Can't I just add things to the storage on the client
side? Verify that they exist when they checkout. Might depend on what 
data I have access to on the front end. I would like to keep prodIds 
and quantities in the storage. Probably price too, so that I can display 
that. Might need to do server stuff on /cart page, but probably not.
I could also remove from cart without the backend.

On checkout, I would need to verify the products and their prices on 
the backend, to make sure nothings been tampered with or deleted since
they were added to the cart. Then it would ask to log in, or maybe let 
them checkout as a guest (as long as they give an email). So I really
don't think you need a cart schema at all. You don't need to get it 
from storage until the last step of the checkout. But it would be a 
better UX to have the cart persist past the session and be tied to the 
account. I can add that feature later.


Gettting Data for the cart from back-end

Get cart from storage and send it ot the back-end. Only need the prodId
on the back. Can use that to get the rest of the info from the db. But
how? Looping doesn't work because of it's asynchronous-ness. Can I get 
products individually? Or is there a way to wait for the async loops?
